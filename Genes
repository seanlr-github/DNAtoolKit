Nucleotides = {"DNA":["A", "T", "G", "C"], "RNA": ["A", "U", "G", "C"] }
Complement_list = {'A':'T', 'T':'A', 'G':'C', 'C':'G'}

DNA_Codons = {
    # '+' - START CODON, '-' - STOP CODON
    "GCT": "A", "GCC": "A", "GCA": "A", "GCG": "A",
    "TGT": "C", "TGC": "C",
    "GAT": "D", "GAC": "D",
    "GAA": "E", "GAG": "E",
    "TTT": "F", "TTC": "F",
    "GGT": "G", "GGC": "G", "GGA": "G", "GGG": "G",
    "CAT": "H", "CAC": "H",
    "ATA": "I", "ATT": "I", "ATC": "I",
    "AAA": "K", "AAG": "K",
    "TTA": "L", "TTG": "L", "CTT": "L", "CTC": "L", "CTA": "L", "CTG": "L",
    "ATG": "+",
    "AAT": "N", "AAC": "N",
    "CCT": "P", "CCC": "P", "CCA": "P", "CCG": "P",
    "CAA": "Q", "CAG": "Q",
    "CGT": "R", "CGC": "R", "CGA": "R", "CGG": "R", "AGA": "R", "AGG": "R",
    "TCT": "S", "TCC": "S", "TCA": "S", "TCG": "S", "AGT": "S", "AGC": "S",
    "ACT": "T", "ACC": "T", "ACA": "T", "ACG": "T",
    "GTT": "V", "GTC": "V", "GTA": "V", "GTG": "V",
    "TGG": "W",
    "TAT": "Y", "TAC": "Y",
    "TAA": "-", "TAG": "-", "TGA": "-"
}

RNA_Codons = {
    # '+' - START CODON, '-' - STOP CODON
    "GCU": "A", "GCC": "A", "GCA": "A", "GCG": "A",
    "UGU": "C", "UGC": "C",
    "GAU": "D", "GAC": "D",
    "GAA": "E", "GAG": "E",
    "UUU": "F", "UUC": "F",
    "GGU": "G", "GGC": "G", "GGA": "G", "GGG": "G",
    "CAU": "H", "CAC": "H",
    "AUA": "I", "AUU": "I", "AUC": "I",
    "AAA": "K", "AAG": "K",
    "UUA": "L", "UUG": "L", "CUU": "L", "CUC": "L", "CUA": "L", "CUG": "L",
    "AUG": "+",
    "AAU": "N", "AAC": "N",
    "CCU": "P", "CCC": "P", "CCA": "P", "CCG": "P",
    "CAA": "Q", "CAG": "Q",
    "CGU": "R", "CGC": "R", "CGA": "R", "CGG": "R", "AGA": "R", "AGG": "R",
    "UCU": "S", "UCC": "S", "UCA": "S", "UCG": "S", "AGU": "S", "AGC": "S",
    "ACU": "T", "ACC": "T", "ACA": "T", "ACG": "T",
    "GUU": "V", "GUC": "V", "GUA": "V", "GUG": "V",
    "UGG": "W",
    "UAU": "Y", "UAC": "Y",
    "UAA": "-", "UAG": "-", "UGA": "-"
}


class bio_gen:
    """ Analysis of DNA sequence """
    
    
    def __init__(self, seq="ATCG", seq_type ="DNA", label = "No Label"):
        # Sequence initializtion and creating error message (assertion does not allow function to proceed if there are missing nucleotides in sequence)
        
        self.seq = seq.upper()
        self.label = label
        self.seq_type = seq_type
        self.is_valid = self.__validation()
        assert self.is_valid, f"Sequence has an error (either missing nucleotides or wrong type), please review and provide a {self.seq_type} sequence"
    
    def biotype(self):
        #Similar to info but just returns bioseq type
        return self.seq_type

    def __validation(self):
    # Validating if DNA sequence contains a full string of nucleotides (A,T,C,G) 
        return set(Nucleotides[self.seq_type]).issuperset(self.seq)
    
    def info(self):
        # Providing simple information regarding the sequence (i.e. the information used to validate itself)
        return f"Label: {self.label}\nSequence: {self.seq}\nBiotype: {self.seq_type}\nLength: {len(self.seq)}"
    
    def random_sequ_gen(self, amt_nucleotides = 50, seq_type="DNA"):
        #Creating a sequence of DNA for an example
        seq = ''.join([random.choice(Nucleotides[seq_type]) for d in range (amt_nucleotides)])
        
        self.__init__(seq,seq_type,"Sample Sequence Created via Random Function")
    
    def transcription(self):
        # DNA into RNA
        if self.seq_type == "DNA":
             return self.seq.replace("T","U")
        return "Not a DNA Sequence"
    
    def Complement(self):
        #Complement Stand of DNA given/Random DNA produced 3' to 5'
        if self.seq_type == "RNA":
            mapping = str.maketrans('GCAU', 'CGUA')
        else:
            mapping = str.maketrans('TACG', 'AT')
        return self.seq.translate(mapping)
    
    def Reverse_Complement(self):
        #Comeplement Strand of DNA given/Random DNA produced 5' to 3'
        if self.seq_type == "RNA":
            mapping = str.maketrans('GCAU', 'CGUA')
        else:
            mapping = str.maketrans('TACG', 'ATGC')
            
        return self.seq.translate(mapping)[::-1]
        
    def GC_content(self):
        #GC content of DNA
        return round((self.seq.count('C') + self.seq.count('G'))/len(self.seq) * 100 )
    
    def AT_content(self):
        #AT content of DNA
        if self.seq_type == "DNA":
            return round((self.seq.count('A') + self.seq.count('T'))/len(self.seq) * 100 )
        else: 
            return "Not a DNA sequence"
            
    def GC_content_subsec(self, l=5):
        #GC content within a particular subsection of DNA
        GC = []
        for a in range(0, len(self.seq) - l + 1, l):
            result = self.seq[a:a+l]
            GC.append(round((result.count('C') + result.count('G'))/len(result) * 100 ))
        return GC

    def AT_content_subsec(self, l=5):
        #AT content within a particular subsection of DNA
        if self.seq_type == "DNA":
            AT = []
            for a in range(0, len(self.seq) - l + 1, l):
                result = self.seq[a:a+l]
                AT.append(round((result.count('A') + result.count('T'))/len(result) * 100 ))
            return AT
        else:
            return "Not a DNA sequence"
    
    def nucleotide_freq(self):
        #Frequency of nucleotides within a sequence
        if self.seq_type == "DNA":
            distrubution = {'A':0, 'T':0, 'C':0, 'G':0}
            for nuc in self.seq:
                distrubution[nuc] += 1
        elif self.seq_type == "RNA":
            distrubution = {'A':0, 'U':0, 'C':0, 'G':0}
            for nuc in self.seq:
                distrubution[nuc] += 1
            
        return distrubution
    
    def translate(self, frame = 0):
        #DNA or RNA into Codons
        if self.seq_type == "DNA":
            return [DNA_Codons[self.seq[pos:pos+3]] for pos in range(frame, len(self.seq) - 2, 3)]
        elif self.seq_type == "RNA":
            return [RNA_Codons[self.seq[pos:pos+3]] for pos in range(frame, len(self.seq) - 2, 3)]
  
    def codon_freq(self, aa):
        #Codon Frequency
        tmp = []
        if self.seq_type == "DNA":
            for i in range(0, len(self.seq)-2, 3):
                if DNA_Codons[self.seq[i:i + 3]] == aa:
                    tmp.append(self.seq[i:i+3])
        
        elif self.seq_type == "RNA":
            for i in range(0, len(self.seq)-2, 3):
                if RNA_Codons[self.seq[i:i + 3]] == aa:
                    tmp.append(self.seq[i:i+3])
                    
        freq = dict(Counter(tmp))
        codon_sum = sum(freq.values())
        for self.seq in freq:
            freq[self.seq] = round(freq[self.seq]/codon_sum,2)
                
        return freq
    
    def reading_frames(self):
        #Identifying amino acides within different reading frames
        frames = []
        frames.append(self.translate(0)) 
        frames.append(self.translate(1))
        frames.append(self.translate(2))
        temp = bio_gen(self.Reverse_Complement(), self.seq_type)
        frames.append(temp.translate(0))
        frames.append(temp.translate(1))
        frames.append(temp.translate(2))
        del temp
        return frames 
    

    def proteins_forf(self, aa_seq):
    #identifying proteins within a fram
        current_protein = []
        proteins = []
        for aa in aa_seq:
            if aa == '-':
                if current_protein:
                    for p in current_protein:
                        proteins.append(p)
                    current_protein = []
            else:
                if aa == '+':
                    current_protein.append("")
                for i in range(len(current_protein)):
                    current_protein[i] += aa
        return proteins
    
    def all_proteins_forf(self, ordered = False, endReadPos = 0, startReadPos = 0):
    #identifying proteins within all reading frames
        if endReadPos > startReadPos:
            tmp_seq = bio_seq(self.seq[startReadPos: endReadPos], self.seq_type)
            rfs = tmp_seq.reading_frames()
        else:
            rfs = self.reading_frames()
        
        result = []
        for f in rfs:
            proteins = self.proteins_forf(f)
            for p in proteins:
                result.append(p)
    
        if ordered:
            return sorted(result, key=len,reverse=True)
        return result
